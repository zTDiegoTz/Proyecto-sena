// ============================================================================
// CORREGIR FUNCI√ìN DUPLICADA - ESTACI√ìN DE GASOLINA
// ============================================================================
// Script para eliminar la funci√≥n duplicada actualizar_stock_venta

const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://adbzfiepkxtyqudwfysk.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFkYnpmaWVwa3h0eXF1ZHdmeXNrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MzI4NTMsImV4cCI6MjA3MzAwODg1M30.p28PzncJkprjEluCMsFsaqio0zTsrRrzM2whZ52_rtI'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function eliminarFuncionDuplicada() {
  try {
    console.log('üóëÔ∏è  ELIMINANDO FUNCI√ìN DUPLICADA actualizar_stock_venta...')
    
    // Primero, vamos a eliminar todas las versiones de la funci√≥n
    console.log('\nüìã PASO 1: Eliminando todas las versiones de la funci√≥n...')
    
    // Eliminar funci√≥n con par√°metro BIGINT (versi√≥n incorrecta)
    const { error: error1 } = await supabase
      .rpc('exec_sql', {
        sql: 'DROP FUNCTION IF EXISTS actualizar_stock_venta(BIGINT, VARCHAR, NUMERIC) CASCADE;'
      })
    
    if (error1) {
      console.log('‚ö†Ô∏è  Error eliminando funci√≥n BIGINT:', error1.message)
    } else {
      console.log('‚úÖ Funci√≥n con BIGINT eliminada exitosamente')
    }
    
    // Eliminar funci√≥n con par√°metro UUID (versi√≥n correcta)
    const { error: error2 } = await supabase
      .rpc('exec_sql', {
        sql: 'DROP FUNCTION IF EXISTS actualizar_stock_venta(UUID, VARCHAR, NUMERIC) CASCADE;'
      })
    
    if (error2) {
      console.log('‚ö†Ô∏è  Error eliminando funci√≥n UUID:', error2.message)
    } else {
      console.log('‚úÖ Funci√≥n con UUID eliminada exitosamente')
    }
    
    console.log('\nüìã PASO 2: Recreando solo la versi√≥n correcta (UUID)...')
    
    // Recrear solo la versi√≥n correcta con UUID
    const funcionCorrecta = `
      CREATE OR REPLACE FUNCTION actualizar_stock_venta(
        p_surtidor_id UUID,
        p_tipo_combustible VARCHAR(20),
        p_cantidad NUMERIC
      )
      RETURNS VOID AS $$
      BEGIN
        -- Actualizar el stock del combustible en el surtidor
        UPDATE combustibles_surtidor 
        SET stock_actual = stock_actual - p_cantidad,
            fecha_actualizacion = NOW()
        WHERE surtidor_id = p_surtidor_id 
          AND tipo_combustible = p_tipo_combustible;
        
        -- Verificar que la actualizaci√≥n fue exitosa
        IF NOT FOUND THEN
          RAISE EXCEPTION 'No se encontr√≥ el combustible % en el surtidor %', p_tipo_combustible, p_surtidor_id;
        END IF;
        
        -- Log de la operaci√≥n
        RAISE NOTICE 'Stock actualizado: Surtidor %, Combustible %, Cantidad vendida: %', 
          p_surtidor_id, p_tipo_combustible, p_cantidad;
          
      END;
      $$ LANGUAGE plpgsql;
    `
    
    const { error: error3 } = await supabase
      .rpc('exec_sql', {
        sql: funcionCorrecta
      })
    
    if (error3) {
      console.log('‚ùå Error recreando funci√≥n:', error3.message)
      return false
    } else {
      console.log('‚úÖ Funci√≥n correcta recreada exitosamente')
    }
    
    return true
    
  } catch (error) {
    console.log('‚ùå Error durante la correcci√≥n:', error.message)
    return false
  }
}

async function probarFuncionCorregida() {
  try {
    console.log('\nüß™ PROBANDO FUNCI√ìN CORREGIDA...')
    
    // Obtener un surtidor v√°lido
    const { data: surtidor, error: surtidorError } = await supabase
      .from('surtidores')
      .select('id, nombre')
      .limit(1)
      .single()
    
    if (surtidorError) {
      console.log('‚ùå Error obteniendo surtidor:', surtidorError.message)
      return false
    }
    
    console.log('üìä Probando con surtidor:', surtidor.nombre, '(ID:', surtidor.id, ')')
    
    // Probar la funci√≥n corregida
    const { data: resultado, error: error } = await supabase
      .rpc('actualizar_stock_venta', {
        p_surtidor_id: surtidor.id,
        p_tipo_combustible: 'corriente',
        p_cantidad: 1
      })
    
    if (error) {
      console.log('‚ùå Error probando funci√≥n:', error.message)
      console.log('   C√≥digo:', error.code)
      console.log('   Detalles:', error.details)
      return false
    } else {
      console.log('‚úÖ Funci√≥n ejecutada correctamente')
      console.log('   Resultado:', resultado)
      return true
    }
    
  } catch (error) {
    console.log('‚ùå Error durante la prueba:', error.message)
    return false
  }
}

async function verificarEstadoFinal() {
  try {
    console.log('\nüîç VERIFICANDO ESTADO FINAL...')
    
    // Verificar que solo existe una versi√≥n de la funci√≥n
    console.log('üìã Verificando que la funci√≥n funciona correctamente...')
    
    const { data: surtidor, error: surtidorError } = await supabase
      .from('surtidores')
      .select('id, nombre')
      .limit(1)
      .single()
    
    if (surtidorError) {
      console.log('‚ùå Error obteniendo surtidor:', surtidorError.message)
      return false
    }
    
    // Probar la funci√≥n una vez m√°s
    const { error: error } = await supabase
      .rpc('actualizar_stock_venta', {
        p_surtidor_id: surtidor.id,
        p_tipo_combustible: 'extra',
        p_cantidad: 0.5
      })
    
    if (error) {
      console.log('‚ùå Error en verificaci√≥n final:', error.message)
      return false
    } else {
      console.log('‚úÖ Verificaci√≥n final exitosa')
      console.log('‚úÖ La funci√≥n actualizar_stock_venta funciona correctamente')
      console.log('‚úÖ Solo existe una versi√≥n de la funci√≥n (con UUID)')
      return true
    }
    
  } catch (error) {
    console.log('‚ùå Error durante la verificaci√≥n final:', error.message)
    return false
  }
}

async function main() {
  try {
    console.log('üîß INICIANDO CORRECCI√ìN DE FUNCI√ìN DUPLICADA...')
    
    // Paso 1: Eliminar funci√≥n duplicada
    const eliminacionExitosa = await eliminarFuncionDuplicada()
    
    if (!eliminacionExitosa) {
      console.log('‚ùå No se pudo eliminar la funci√≥n duplicada')
      return
    }
    
    // Paso 2: Probar funci√≥n corregida
    const pruebaExitosa = await probarFuncionCorregida()
    
    if (!pruebaExitosa) {
      console.log('‚ùå La funci√≥n no funciona correctamente despu√©s de la correcci√≥n')
      return
    }
    
    // Paso 3: Verificar estado final
    const verificacionExitosa = await verificarEstadoFinal()
    
    if (verificacionExitosa) {
      console.log('\nüéâ CORRECCI√ìN COMPLETADA EXITOSAMENTE üéâ')
      console.log('‚úÖ Funci√≥n duplicada eliminada')
      console.log('‚úÖ Solo existe la versi√≥n correcta (UUID)')
      console.log('‚úÖ La funci√≥n funciona correctamente')
      console.log('\nüìã PR√ìXIMO PASO: Ejecutar verificaci√≥n de integridad completa')
    } else {
      console.log('‚ùå La correcci√≥n no fue completamente exitosa')
    }
    
  } catch (error) {
    console.log('‚ùå Error durante la correcci√≥n:', error.message)
  }
}

main()

