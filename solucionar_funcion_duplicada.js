// ============================================================================
// SOLUCIONAR FUNCI√ìN DUPLICADA - ESTACI√ìN DE GASOLINA
// ============================================================================
// Script para solucionar el problema de funci√≥n duplicada usando una aproximaci√≥n diferente

const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = 'https://adbzfiepkxtyqudwfysk.supabase.co'
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFkYnpmaWVwa3h0eXF1ZHdmeXNrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc0MzI4NTMsImV4cCI6MjA3MzAwODg1M30.p28PzncJkprjEluCMsFsaqio0zTsrRrzM2whZ52_rtI'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function crearFuncionAlternativa() {
  try {
    console.log('üîß CREANDO FUNCI√ìN ALTERNATIVA PARA EVITAR CONFLICTO...')
    
    // Crear una funci√≥n con un nombre diferente que use UUID
    const funcionAlternativa = `
      CREATE OR REPLACE FUNCTION actualizar_stock_venta_uuid(
        p_surtidor_id UUID,
        p_tipo_combustible VARCHAR(20),
        p_cantidad NUMERIC
      )
      RETURNS VOID AS $$
      BEGIN
        -- Actualizar el stock del combustible en el surtidor
        UPDATE combustibles_surtidor 
        SET stock_actual = stock_actual - p_cantidad,
            fecha_actualizacion = NOW()
        WHERE surtidor_id = p_surtidor_id 
          AND tipo_combustible = p_tipo_combustible;
        
        -- Verificar que la actualizaci√≥n fue exitosa
        IF NOT FOUND THEN
          RAISE EXCEPTION 'No se encontr√≥ el combustible % en el surtidor %', p_tipo_combustible, p_surtidor_id;
        END IF;
        
        -- Log de la operaci√≥n
        RAISE NOTICE 'Stock actualizado: Surtidor %, Combustible %, Cantidad vendida: %', 
          p_surtidor_id, p_tipo_combustible, p_cantidad;
          
      END;
      $$ LANGUAGE plpgsql;
    `
    
    // Intentar crear la funci√≥n usando una llamada directa
    const { error: error } = await supabase
      .rpc('create_function', {
        function_definition: funcionAlternativa
      })
    
    if (error) {
      console.log('‚ùå Error creando funci√≥n alternativa:', error.message)
      return false
    } else {
      console.log('‚úÖ Funci√≥n alternativa creada exitosamente')
      return true
    }
    
  } catch (error) {
    console.log('‚ùå Error durante la creaci√≥n:', error.message)
    return false
  }
}

async function probarFuncionAlternativa() {
  try {
    console.log('\nüß™ PROBANDO FUNCI√ìN ALTERNATIVA...')
    
    // Obtener un surtidor v√°lido
    const { data: surtidor, error: surtidorError } = await supabase
      .from('surtidores')
      .select('id, nombre')
      .limit(1)
      .single()
    
    if (surtidorError) {
      console.log('‚ùå Error obteniendo surtidor:', surtidorError.message)
      return false
    }
    
    console.log('üìä Probando con surtidor:', surtidor.nombre, '(ID:', surtidor.id, ')')
    
    // Probar la funci√≥n alternativa
    const { data: resultado, error: error } = await supabase
      .rpc('actualizar_stock_venta_uuid', {
        p_surtidor_id: surtidor.id,
        p_tipo_combustible: 'corriente',
        p_cantidad: 1
      })
    
    if (error) {
      console.log('‚ùå Error probando funci√≥n alternativa:', error.message)
      console.log('   C√≥digo:', error.code)
      console.log('   Detalles:', error.details)
      return false
    } else {
      console.log('‚úÖ Funci√≥n alternativa ejecutada correctamente')
      console.log('   Resultado:', resultado)
      return true
    }
    
  } catch (error) {
    console.log('‚ùå Error durante la prueba:', error.message)
    return false
  }
}

async function actualizarServiciosFrontend() {
  try {
    console.log('\nüîÑ ACTUALIZANDO SERVICIOS DEL FRONTEND...')
    
    // Leer el archivo de servicios
    const fs = require('fs')
    const path = require('path')
    
    const archivoServicios = 'src/services/supabaseServiceFinal.js'
    
    if (!fs.existsSync(archivoServicios)) {
      console.log('‚ùå Archivo de servicios no encontrado:', archivoServicios)
      return false
    }
    
    let contenido = fs.readFileSync(archivoServicios, 'utf8')
    
    // Buscar y reemplazar llamadas a la funci√≥n problem√°tica
    const llamadaOriginal = 'actualizar_stock_venta'
    const llamadaNueva = 'actualizar_stock_venta_uuid'
    
    if (contenido.includes(llamadaOriginal)) {
      contenido = contenido.replace(new RegExp(llamadaOriginal, 'g'), llamadaNueva)
      
      // Escribir el archivo actualizado
      fs.writeFileSync(archivoServicios, contenido, 'utf8')
      
      console.log('‚úÖ Servicios del frontend actualizados')
      console.log(`   Reemplazado: ${llamadaOriginal} ‚Üí ${llamadaNueva}`)
      return true
    } else {
      console.log('‚ö†Ô∏è  No se encontraron llamadas a la funci√≥n problem√°tica en los servicios')
      return true
    }
    
  } catch (error) {
    console.log('‚ùå Error actualizando servicios:', error.message)
    return false
  }
}

async function verificarSolucion() {
  try {
    console.log('\nüîç VERIFICANDO SOLUCI√ìN...')
    
    // Verificar que la funci√≥n alternativa funciona
    const { data: surtidor, error: surtidorError } = await supabase
      .from('surtidores')
      .select('id, nombre')
      .limit(1)
      .single()
    
    if (surtidorError) {
      console.log('‚ùå Error obteniendo surtidor:', surtidorError.message)
      return false
    }
    
    // Probar la funci√≥n alternativa
    const { error: error } = await supabase
      .rpc('actualizar_stock_venta_uuid', {
        p_surtidor_id: surtidor.id,
        p_tipo_combustible: 'extra',
        p_cantidad: 0.5
      })
    
    if (error) {
      console.log('‚ùå Error en verificaci√≥n:', error.message)
      return false
    } else {
      console.log('‚úÖ Verificaci√≥n exitosa')
      console.log('‚úÖ La funci√≥n alternativa funciona correctamente')
      return true
    }
    
  } catch (error) {
    console.log('‚ùå Error durante la verificaci√≥n:', error.message)
    return false
  }
}

async function main() {
  try {
    console.log('üîß INICIANDO SOLUCI√ìN DE FUNCI√ìN DUPLICADA...')
    
    // Paso 1: Crear funci√≥n alternativa
    const creacionExitosa = await crearFuncionAlternativa()
    
    if (!creacionExitosa) {
      console.log('‚ùå No se pudo crear la funci√≥n alternativa')
      return
    }
    
    // Paso 2: Probar funci√≥n alternativa
    const pruebaExitosa = await probarFuncionAlternativa()
    
    if (!pruebaExitosa) {
      console.log('‚ùå La funci√≥n alternativa no funciona correctamente')
      return
    }
    
    // Paso 3: Actualizar servicios del frontend
    const actualizacionExitosa = await actualizarServiciosFrontend()
    
    if (!actualizacionExitosa) {
      console.log('‚ùå No se pudieron actualizar los servicios del frontend')
      return
    }
    
    // Paso 4: Verificar soluci√≥n
    const verificacionExitosa = await verificarSolucion()
    
    if (verificacionExitosa) {
      console.log('\nüéâ SOLUCI√ìN COMPLETADA EXITOSAMENTE üéâ')
      console.log('‚úÖ Funci√≥n alternativa creada (actualizar_stock_venta_uuid)')
      console.log('‚úÖ Servicios del frontend actualizados')
      console.log('‚úÖ La funci√≥n funciona correctamente')
      console.log('\nüìã PR√ìXIMO PASO: Ejecutar verificaci√≥n de integridad completa')
    } else {
      console.log('‚ùå La soluci√≥n no fue completamente exitosa')
    }
    
  } catch (error) {
    console.log('‚ùå Error durante la soluci√≥n:', error.message)
  }
}

main()
